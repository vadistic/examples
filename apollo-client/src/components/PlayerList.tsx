/* eslint-disable @typescript-eslint/no-unused-vars */
import React from 'react'
import { useQuery, useMutation } from '@apollo/react-hooks'
import { PLAYER_LIST_QUERY, DELETE_PLAYER_MUTATION } from './PlayerList.graphql'

// this typescript stuff should be autogenerated
// for simplicity I'm writing it by hand

interface Player {
  id: number
  name: string
  score: number
}

interface PlayerListQuery {
  players: Player[]
}

interface DeletePlayerMutation {
  deletePlayer: Player
}

export const PlayerList: React.FC = () => {
  const { loading, data, error } = useQuery<PlayerListQuery>(
    PLAYER_LIST_QUERY,
    {
      pollInterval: 2000,
      onCompleted: () => {
        console.log('Fetched/refetched PLAYER_LIST_QUERY')
      },
    }
  )

  const [deletePlayer, deletePlayerRes] = useMutation<DeletePlayerMutation>(
    DELETE_PLAYER_MUTATION,
    { refetchQueries: ['PlayerList'] }
  )

  if (loading) {
    return (
      <div>
        <p>loading...</p>
      </div>
    )
  }
  if (error) {
    return (
      <div>
        <p>Error!</p>
        <pre>
          <code>{JSON.stringify(error, null, 2)}</code>
        </pre>
      </div>
    )
  }

  return (
    <div>
      <h3>Players</h3>
      {data!.players.map((player) => (
        <p key={player.id}>
          {player.name} {player.score}
          {'     '}
          <button
            onClick={() => deletePlayer({ variables: { id: player.id } })}
          >
            X
          </button>
        </p>
      ))}
    </div>
  )
}
